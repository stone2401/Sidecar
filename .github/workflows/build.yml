name: 构建和发布 Sidecar

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # ===================================================================
  # 步骤 1: 在各个平台上构建独立的二进制文件
  # ===================================================================
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            name: linux-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-intel
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-arm64

    runs-on: ${{ matrix.os }}

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 安装 Rust 工具链
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: 安装系统依赖 (Ubuntu)
      if: matrix.os == 'ubuntu-24.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libwebkit2gtk-4.1-dev \
          libjavascriptcoregtk-4.1-dev \
          libgtk-3-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          build-essential

    - name: Rust 缓存
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'
        key: ${{ matrix.target }}

    - name: 构建裸二进制文件
      shell: bash
      run: |
        cd src-tauri
        cargo build --release --target ${{ matrix.target }} --verbose

    - name: 准备并重命名二进制文件
      shell: bash
      run: |
        mkdir -p ./artifact
        APP_NAME="sidecar"
        SOURCE_DIR="src-tauri/target/${{ matrix.target }}/release"
        TARGET_NAME="sidecar-${{ matrix.name }}"

        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp "${SOURCE_DIR}/${APP_NAME}.exe" "./artifact/${TARGET_NAME}.exe"
        else
          cp "${SOURCE_DIR}/${APP_NAME}" "./artifact/${TARGET_NAME}"
          chmod +x "./artifact/${TARGET_NAME}"
        fi
        
        echo "✅ Renamed binary:"
        ls -l ./artifact

    - name: 上传单个平台的二进制文件
      uses: actions/upload-artifact@v4
      with:
        name: sidecar-binary-${{ matrix.name }}
        path: ./artifact/
        retention-days: 7

  # ===================================================================
  # 步骤 2: 合并所有二进制文件并准备发布包
  # ===================================================================
  merge_and_release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码 (用于获取 README)
      uses: actions/checkout@v4

    - name: 下载所有构建好的二进制文件
      uses: actions/download-artifact@v4
      with:
        path: all-binaries/
        pattern: sidecar-binary-*
        merge-multiple: true

    - name: 整理文件并创建发布包
      id: prep_release
      run: |
        # 1. 创建一个干净的发布准备区
        mkdir -p release_assets
        
        # 2. 将所有下载的二进制文件移动到准备区
        mv all-binaries/* release_assets/
        
        # 3. 在准备区内生成校验和文件
        cd release_assets
        sha256sum sidecar-* > checksums.txt
        cd ..
        
        # 4. 创建包含所有内容的压缩包 (在准备区之外创建)
        VERSION="${GITHUB_REF_NAME:-latest}"
        CLEAN_VERSION=$(echo "$VERSION" | sed 's/^v//')
        # ✅ *** 这是修正后的关键行 ***
        tar -czf "sidecar-${CLEAN_VERSION}-all-platforms.tar.gz" -C release_assets .
        
        # 5. 将最终的压缩包和说明文档也移动到准备区，以便统一上传
        mv "sidecar-${CLEAN_VERSION}-all-platforms.tar.gz" release_assets/
        if [ -f "README-BINARY.md" ]; then
          cp README-BINARY.md release_assets/
        fi
        
        echo "✅ Release assets prepared:"
        ls -lR release_assets/

    - name: 上传最终的发布包 (作为构建产物)
      uses: actions/upload-artifact@v4
      with:
        name: sidecar-release-package
        path: release_assets/
        retention-days: 30

    - name: 创建 GitHub Release (仅在打标签时触发)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: release_assets/*
        body: |
          ## 🎉 Sidecar ${{ github.ref_name }} Release
          
          This release contains the bare-metal binaries for Sidecar. 
          Download the appropriate binary for your system, or the `.tar.gz` archive containing all platforms.
          
          ### ✅ Verification
          
          Please verify the integrity of the downloaded files using the `checksums.txt`:
          ```bash
          sha256sum -c checksums.txt
          ```

          ### 🚀 Quick Start
          
          **Linux / macOS:**
          ```bash
          chmod +x ./sidecar-linux-x64
          ./sidecar-linux-x64 --url https://example.com
          ```
          
          **Windows (CMD/PowerShell):**
          ```cmd
          sidecar-windows-x64.exe --url https://example.com
          ```
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
