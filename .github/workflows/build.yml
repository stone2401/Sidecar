name: 构建二进制文件

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            name: linux-x64
            
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x64
            
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-intel
            
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-arm64

    runs-on: ${{ matrix.os }}

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 安装 Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: 安装系统依赖 (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libwebkit2gtk-4.0-dev \
          libgtk-3-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev

    - name: Rust 缓存
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'
        key: ${{ matrix.target }}

    - name: 准备构建环境
      run: |
        mkdir -p empty_dist
        echo "<!DOCTYPE html><html><body></body></html>" > empty_dist/index.html

    - name: 构建
      run: |
        cd src-tauri
        cargo build --release --target ${{ matrix.target }}

    # 只收集二进制文件，不创建额外的目录或压缩包
    - name: 准备上传
      shell: bash
      run: |
        # 确定二进制文件名
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          BINARY_NAME="gui.exe"
        else
          BINARY_NAME="gui"
        fi
        
        # 找到并重命名二进制文件
        BINARY_PATH="src-tauri/target/${{ matrix.target }}/release/$BINARY_NAME"
        
        if [ -f "$BINARY_PATH" ]; then
          # 直接复制到根目录，使用平台友好的名称
          cp "$BINARY_PATH" "gui-${{ matrix.name }}"
          
          # 确保可执行权限（Unix 系统）
          if [ "${{ matrix.os }}" != "windows-latest" ]; then
            chmod +x "gui-${{ matrix.name }}"
          fi
          
          echo "✅ 二进制文件准备完成: gui-${{ matrix.name }}"
          ls -lh "gui-${{ matrix.name }}"
        else
          echo "❌ 未找到二进制文件: $BINARY_PATH"
          exit 1
        fi

    # 直接上传单个二进制文件
    - name: 上传二进制文件
      uses: actions/upload-artifact@v4
      with:
        name: gui-${{ matrix.name }}
        path: gui-${{ matrix.name }}
        retention-days: 30

  # 合并所有二进制文件到一个 artifact
  merge:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: 下载所有二进制文件
      uses: actions/download-artifact@v4
      with:
        path: binaries
        pattern: gui-*
        merge-multiple: true

    - name: 显示所有文件
      run: |
        echo "=== 所有二进制文件 ==="
        ls -lh binaries/
        
        # 计算 SHA256
        echo -e "\n=== SHA256 校验和 ==="
        cd binaries
        for file in gui-*; do
          if [ -f "$file" ]; then
            sha256sum "$file"
          fi
        done

    - name: 创建统一压缩包
      run: |
        cd binaries
        tar -czf ../gui-all-platforms.tar.gz gui-*
        cd ..
        ls -lh gui-all-platforms.tar.gz

    - name: 上传合并包
      uses: actions/upload-artifact@v4
      with:
        name: gui-all-platforms
        path: |
          binaries/gui-*
          gui-all-platforms.tar.gz
        retention-days: 30

    # 如果是标签，创建 Release
    - name: 创建 Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          binaries/gui-*
          gui-all-platforms.tar.gz
        body: |
          ## 下载说明
          
          ### 单独下载
          - **Windows (64位)**: `gui-windows-x64.exe`
          - **macOS (Intel)**: `gui-macos-intel`
          - **macOS (Apple Silicon)**: `gui-macos-arm64`
          - **Linux (64位)**: `gui-linux-x64`
          
          ### 使用方法
          1. 下载对应平台的文件
          2. 添加执行权限（Unix/macOS）: `chmod +x gui-*`
          3. 运行: `./gui-* --url https://your-url.com`
          
          ### 所有平台打包下载
          - `gui-all-platforms.tar.gz` - 包含所有平台的二进制文件
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
