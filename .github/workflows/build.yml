name: 构建和发布 Sidecar

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            name: linux-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x64
          - os: macos-15
            target: x86_64-apple-darwin
            name: macos-intel
          - os: macos-15
            target: aarch64-apple-darwin
            name: macos-arm64

    runs-on: ${{ matrix.os }}
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    - name: 安装 Rust 工具链
      uses: dtolnay/rust-toolchain@stable
      with: { targets: "${{ matrix.target }}" }
    - name: 安装系统依赖 (Ubuntu)
      if: matrix.os == 'ubuntu-24.04'
      run: sudo apt-get update && sudo apt-get install -y libwebkit2gtk-4.1-dev libjavascriptcoregtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev build-essential
    - name: Rust 缓存
      uses: Swatinem/rust-cache@v2
      with: { workspaces: './src-tauri -> target', key: "${{ matrix.target }}" }
    - name: 构建裸二进制文件
      shell: bash
      run: |
        cd src-tauri
        cargo build --release --target ${{ matrix.target }} --verbose
    - name: 准备并重命名二进制文件
      shell: bash
      run: |
        mkdir -p ./artifact
        APP_NAME="sidecar" # 确保这是你 Cargo.toml 中的 [package].name
        SOURCE_DIR="src-tauri/target/${{ matrix.target }}/release"
        TARGET_NAME="sidecar-${{ matrix.name }}"
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp "${SOURCE_DIR}/${APP_NAME}.exe" "./artifact/${TARGET_NAME}.exe"
        else
          cp "${SOURCE_DIR}/${APP_NAME}" "./artifact/${TARGET_NAME}"
          chmod +x "./artifact/${TARGET_NAME}"
        fi
        ls -l ./artifact
    - name: 上传单个平台的二进制文件
      uses: actions/upload-artifact@v4
      with: { name: "sidecar-binary-${{ matrix.name }}", path: ./artifact/, retention-days: 7 }

  merge_and_release:
    needs: build
    runs-on: ubuntu-latest
    
    # ===================================================================
    # 核心修正: 授予创建 Release 的权限
    # ===================================================================
    permissions:
      contents: write
    
    steps:
    - name: 检出代码 (用于获取 README)
      uses: actions/checkout@v4

    - name: 下载所有构建好的二进制文件
      uses: actions/download-artifact@v4
      with: { path: all-binaries/ }

    - name: 整理文件并创建发布包
      id: prep_release
      run: |
        mkdir -p release_files
        find ./all-binaries -type f -exec mv {} ./release_files/ \;
        cd release_files
        sha256sum sidecar-* > checksums.txt
        cd ..
        VERSION="${GITHUB_REF_NAME:-latest}"
        CLEAN_VERSION=$(echo "$VERSION" | sed 's/^v//')
        TARBALL_NAME="sidecar-${CLEAN_VERSION}-all-platforms.tar.gz"
        tar -czf "${TARBALL_NAME}" -C release_files .
        mkdir -p final_package
        mv release_files/* final_package/
        mv "${TARBALL_NAME}" final_package/
        if [ -f "README-BINARY.md" ]; then
          cp README-BINARY.md final_package/
        fi
        echo "✅ Final release package prepared:"
        ls -lR final_package/

    - name: 上传最终的发布包
      uses: actions/upload-artifact@v4
      with:
        name: sidecar-release-package
        path: final_package/
        retention-days: 30

    - name: 创建 GitHub Release (仅在打标签时触发)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: final_package/*
        body: |
          ## 🎉 Sidecar ${{ github.ref_name }} Release
          This release contains the bare-metal binaries for Sidecar.
          Download the appropriate binary for your system, or the `.tar.gz` archive containing all platforms.
          
          ### ✅ Verification
          Please verify the integrity of the downloaded files using the `checksums.txt`:
          ```bash
          sha256sum -c checksums.txt
          ```

          ### 🚀 Quick Start
          **Linux / macOS:**
          ```bash
          chmod +x ./sidecar-linux-x64
          ./sidecar-linux-x64 --url https://example.com
          ```
          **Windows (CMD/PowerShell):**
          ```cmd
          sidecar-windows-x64.exe --url https://example.com
          ```
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
