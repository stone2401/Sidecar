name: 构建 GUI 应用

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: ''
            target: 'x86_64-apple-darwin'
            arch: 'x64'
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            arch: 'arm64'
          - platform: 'ubuntu-22.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
            arch: 'x64'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'
            arch: 'x64'

    runs-on: ${{ matrix.platform }}
    
    steps:
    - name: 检查代码
      uses: actions/checkout@v4

    # 修复点 1：先安装 pnpm
    - name: 安装 pnpm
      uses: pnpm/action-setup@v3
      with:
        version: 8
        run_install: false

    # 修复点 2：设置 Node.js 时指定包管理器
    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'  # 明确告诉它我们用 pnpm

    - name: 设置 Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Rust 缓存
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'

    - name: 安装系统依赖 (Ubuntu)
      if: matrix.platform == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libwebkit2gtk-4.0-dev \
          libwebkit2gtk-4.1-dev \
          libappindicator3-dev \
          librsvg2-dev \
          patchelf \
          libgtk-3-dev \
          libayatana-appindicator3-dev \
          build-essential \
          curl \
          wget \
          file \
          libssl-dev

    - name: 准备构建环境
      shell: bash
      run: |
        # 创建必要的目录和文件
        mkdir -p empty_dist
        echo "<!DOCTYPE html><html><head><title>Placeholder</title></head><body></body></html>" > empty_dist/index.html
        
        # 确保 package.json 存在
        if [ ! -f package.json ]; then
          echo "创建基础 package.json"
          cat > package.json << 'EOF'
        {
          "name": "gui",
          "private": true,
          "version": "0.1.0",
          "type": "module",
          "scripts": {
            "dev": "tauri dev",
            "build": "tauri build",
            "tauri": "tauri"
          },
          "devDependencies": {
            "@tauri-apps/cli": "^2.0.0"
          }
        }
        EOF
        fi

    # 修复点 3：确保锁文件存在
    - name: 创建锁文件（如果不存在）
      shell: bash
      run: |
        if [ ! -f pnpm-lock.yaml ]; then
          echo "创建 pnpm-lock.yaml..."
          pnpm install --lockfile-only
        fi

    - name: 安装依赖
      run: pnpm install --frozen-lockfile

    - name: 验证环境
      run: |
        echo "=== 环境信息 ==="
        echo "Node: $(node --version)"
        echo "pnpm: $(pnpm --version)"
        echo "Rust: $(rustc --version)"
        echo "Tauri CLI: $(pnpm tauri --version)"

    - name: 构建应用
      shell: bash
      run: |
        echo "开始构建 Tauri 应用..."
        
        if [ "${{ matrix.platform }}" = "ubuntu-22.04" ]; then
          export PKG_CONFIG_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig"
          export WEBKIT_DISABLE_COMPOSITING_MODE=1
        fi
        
        pnpm tauri build ${{ matrix.args }} --verbose

    - name: 创建便携版 (Windows)
      if: matrix.platform == 'windows-latest'
      shell: bash
      run: |
        echo "创建 Windows 便携版..."
        
        exe_file=$(find src-tauri/target -name "GUI.exe" -path "*/release/*" ! -path "*/deps/*" | head -1)
        
        if [ -n "$exe_file" ]; then
          portable_dir="GUI-${{ matrix.arch }}-portable"
          mkdir -p "$portable_dir"
          cp "$exe_file" "$portable_dir/"
          
          # 复制 DLL
          dll_dir=$(dirname "$exe_file")
          find "$dll_dir" -maxdepth 1 -name "*.dll" -exec cp {} "$portable_dir/" \; 2>/dev/null || true
          
          # 创建 zip
          7z a -tzip "GUI-windows-${{ matrix.arch }}-portable.zip" "./$portable_dir/*" || \
          powershell "Compress-Archive -Path '$portable_dir/*' -DestinationPath 'GUI-windows-${{ matrix.arch }}-portable.zip' -Force"
        fi

    - name: 创建便携版 (macOS)
      if: matrix.platform == 'macos-latest'
      shell: bash
      run: |
        echo "创建 macOS 便携版..."
        
        app_path=$(find src-tauri/target -name "GUI.app" -type d | head -1)
        
        if [ -n "$app_path" ]; then
          # 使用 ditto 保留权限
          ditto -c -k --sequesterRsrc --keepParent "$app_path" "GUI-macos-${{ matrix.arch }}.zip"
        fi

    - name: 创建便携版 (Linux)
      if: matrix.platform == 'ubuntu-22.04'
      shell: bash
      run: |
        echo "创建 Linux 便携版..."
        
        appimage=$(find src-tauri/target -name "*.AppImage" -type f | head -1)
        
        if [ -n "$appimage" ]; then
          cp "$appimage" "GUI-linux-${{ matrix.arch }}.AppImage"
          chmod +x "GUI-linux-${{ matrix.arch }}.AppImage"
        else
          # 备选：查找二进制
          binary=$(find src-tauri/target/release -name "gui" -type f -executable | head -1)
          if [ -n "$binary" ]; then
            cp "$binary" "GUI-linux-${{ matrix.arch }}"
            chmod +x "GUI-linux-${{ matrix.arch }}"
          fi
        fi

    - name: 收集构建产物
      shell: bash
      run: |
        mkdir -p dist
        
        # 收集便携版
        find . -maxdepth 1 \( -name "*.zip" -o -name "*.AppImage" -o -name "GUI-linux-*" \) -exec mv {} dist/ \; 2>/dev/null || true
        
        # 收集安装包
        if [ -d "src-tauri/target/release/bundle" ]; then
          find src-tauri/target/release/bundle -type f \( -name "*.dmg" -o -name "*.app" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.exe" -o -name "*.msi" \) -exec cp {} dist/ \; 2>/dev/null || true
        fi
        
        ls -la dist/ || echo "No artifacts found"

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: GUI-${{ matrix.platform }}-${{ matrix.arch }}
        path: dist/
        retention-days: 30

    - name: 发布到 Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: dist/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
