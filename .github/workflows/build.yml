name: 构建 GUI 应用

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: ''
            target: 'x86_64-apple-darwin'
            arch: 'x64'
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            arch: 'arm64'
          - platform: 'ubuntu-22.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
            arch: 'x64'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'
            arch: 'x64'

    runs-on: ${{ matrix.platform }}
    
    steps:
    - name: 检查代码
      uses: actions/checkout@v4

    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: 安装 pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: 设置 Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Rust 缓存
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'

    - name: 安装系统依赖 (Ubuntu)
      if: matrix.platform == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libwebkit2gtk-4.0-dev \
          libwebkit2gtk-4.1-dev \
          libappindicator3-dev \
          librsvg2-dev \
          patchelf \
          libgtk-3-dev \
          libayatana-appindicator3-dev \
          build-essential \
          curl \
          wget \
          file \
          libssl-dev

    - name: 准备构建环境
      shell: bash
      run: |
        # 创建必要的目录和文件
        mkdir -p empty_dist
        echo "<!DOCTYPE html><html><head><title>Placeholder</title></head><body><!-- Tauri 动态加载占位文件 --></body></html>" > empty_dist/index.html
        
        # 确保 package.json 存在
        if [ ! -f package.json ]; then
          echo "创建基础 package.json"
          cat > package.json << 'EOF'
        {
          "name": "gui",
          "private": true,
          "version": "0.1.0",
          "type": "module",
          "scripts": {
            "dev": "tauri dev",
            "build": "tauri build",
            "tauri": "tauri"
          },
          "devDependencies": {
            "@tauri-apps/cli": "^2.0.0"
          }
        }
        EOF
        fi
        
        # 创建 pnpm-lock.yaml 如果不存在
        if [ ! -f pnpm-lock.yaml ]; then
          pnpm install --lockfile-only
        fi

    - name: 安装依赖
      run: pnpm install --frozen-lockfile

    - name: 验证环境
      run: |
        echo "=== 环境信息 ==="
        echo "Node: $(node --version)"
        echo "pnpm: $(pnpm --version)"
        echo "Rust: $(rustc --version)"
        echo "Tauri CLI: $(pnpm tauri --version)"
        echo "平台: ${{ matrix.platform }}"
        echo "目标: ${{ matrix.target }}"
        
        echo "=== 项目结构 ==="
        ls -la
        
        echo "=== src-tauri 目录 ==="
        ls -la src-tauri/ || echo "src-tauri 目录不存在"

    - name: 构建应用
      shell: bash
      run: |
        echo "开始构建 Tauri 应用..."
        
        # 设置环境变量
        if [ "${{ matrix.platform }}" = "ubuntu-22.04" ]; then
          export PKG_CONFIG_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig"
          export WEBKIT_DISABLE_COMPOSITING_MODE=1
        fi
        
        # 执行构建
        pnpm tauri build ${{ matrix.args }} --verbose

    - name: 创建便携版 (Windows)
      if: matrix.platform == 'windows-latest'
      shell: bash
      run: |
        echo "创建 Windows 便携版..."
        
        # 查找构建的 exe 文件
        exe_file=$(find src-tauri/target -name "*.exe" -path "*/release/*" ! -path "*/deps/*" | head -1)
        
        if [ -n "$exe_file" ]; then
          echo "找到 exe 文件: $exe_file"
          
          # 创建便携版目录
          portable_dir="GUI-${{ matrix.arch }}-portable"
          mkdir -p "$portable_dir"
          
          # 复制主程序
          cp "$exe_file" "$portable_dir/"
          
          # 查找并复制 DLL 文件
          dll_dir=$(dirname "$exe_file")
          find "$dll_dir" -name "*.dll" -exec cp {} "$portable_dir/" \; 2>/dev/null || true
          
          # 创建启动脚本
          cat > "$portable_dir/start.bat" << 'EOF'
        @echo off
        title GUI Application
        echo 启动 GUI 应用...
        echo 可以使用参数: GUI.exe --url https://example.com
        echo.
        GUI.exe %*
        EOF
          
          # 创建 zip 包
          powershell "Compress-Archive -Path '$portable_dir/*' -DestinationPath 'GUI-windows-${{ matrix.arch }}-portable.zip' -Force"
          
          echo "✅ Windows 便携版创建完成"
        else
          echo "❌ 未找到 exe 文件"
        fi

    - name: 创建便携版 (macOS)
      if: matrix.platform == 'macos-latest'
      shell: bash
      run: |
        echo "创建 macOS 便携版..."
        
        # 查找 .app 文件
        app_file=$(find src-tauri/target -name "*.app" -type d | head -1)
        
        if [ -n "$app_file" ]; then
          echo "找到 app 文件: $app_file"
          
          # 创建 dmg 或直接压缩 app
          zip -r "GUI-macos-${{ matrix.arch }}.zip" "$app_file"
          
          echo "✅ macOS 便携版创建完成"
        else
          echo "❌ 未找到 app 文件"
        fi

    - name: 创建便携版 (Linux)
      if: matrix.platform == 'ubuntu-22.04'
      shell: bash
      run: |
        echo "创建 Linux 便携版..."
        
        # 查找 AppImage 文件
        appimage_file=$(find src-tauri/target -name "*.AppImage" | head -1)
        
        if [ -n "$appimage_file" ]; then
          echo "找到 AppImage 文件: $appimage_file"
          cp "$appimage_file" "GUI-linux-${{ matrix.arch }}.AppImage"
          chmod +x "GUI-linux-${{ matrix.arch }}.AppImage"
          echo "✅ Linux 便携版创建完成"
        else
          echo "❌ 未找到 AppImage 文件"
          # 尝试查找普通的二进制文件
          binary_file=$(find src-tauri/target -name "gui" -type f -executable | head -1)
          if [ -n "$binary_file" ]; then
            echo "找到二进制文件: $binary_file"
            cp "$binary_file" "GUI-linux-${{ matrix.arch }}"
            chmod +x "GUI-linux-${{ matrix.arch }}"
          fi
        fi

    - name: 收集构建产物
      shell: bash
      run: |
        echo "=== 构建产物收集 ==="
        
        # 创建产物目录
        mkdir -p artifacts
        
        # 收集各平台的文件
        find . -maxdepth 1 \( -name "*.zip" -o -name "*.AppImage" -o -name "GUI-*" \) -exec cp {} artifacts/ \;
        
        # 收集标准构建产物
        if [ -d "src-tauri/target/release/bundle" ]; then
          cp -r src-tauri/target/release/bundle/* artifacts/ 2>/dev/null || true
        fi
        
        # 显示最终产物
        echo "=== 最终产物 ==="
        ls -la artifacts/ || echo "没有产物"

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: GUI-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          artifacts/
          *.zip
          *.AppImage
          GUI-*
        retention-days: 30

    - name: 上传到发布 (仅标签推送)
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          artifacts/*
          *.zip
          *.AppImage
          GUI-*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
